~import std::cout;
~import HANDLE;
~import SECURITY_ATTRIBUTES;
~import TCHAR;
~import PlatformConsole;


class Process
{
    ~import TCharString;
    ~import std::stringstream;

    ~block "cpp-include"
    {
        #include <windows.h>
        #include <tchar.h>
        #include <stdio.h>
        #include <strsafe.h>
    }


    //private PlatformConsole & console;
    //private ParserStatus currentLineStatus;
    //private BoostTestParser parser;
    PROCESS_INFORMATION processInfo;
    private int state;
    private SECURITY_ATTRIBUTES secAttr;
    private HANDLE stdoutRead;
    private HANDLE stdoutWrite;
    //private stringstream lineBuffer;

    public Process()
    {
        state = 0;

        secAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
        secAttr.bInheritHandle = TRUE;
        secAttr.lpSecurityDescriptor = NULL;

        // Create a pipe for the child process's STDOUT.
        if (!CreatePipe(&stdoutRead, &stdoutWrite, &secAttr, 0))
        {
            abort("Error creating pipe.");
        }
        if (!SetHandleInformation(stdoutRead, HANDLE_FLAG_INHERIT, 0))
        {
            abort("Error setting info on pipe.");
        }
    }

    private void abort(const char * msg)
    {
        cout << msg << "\n";
        std::abort();
    }

    public TCharString ExeDirectory()
    {
        TCharString str;
        GetModuleFileName(nullptr, str.Get(), str.MaxSize());
        const auto ls = str.LastSlash();
        if (!ls) {
            std::abort();
        }
        str.Get()[ls.get()] = '\0';
        return str;
    }

    /*~hidden void parseOutput(TCHAR * more, size_t length)
    {
        for (signed int i = 0; i < length; ++i)
        {
            if ('\n' == more[i])
            {
                printLine();
            }
            else
            {
                const auto result = parse(more[i]);
                if (result > currentLineStatus)
                {
                    currentLineStatus = result;
                }
                lineBuffer << more[i];
            }
        }
    }*/

    /*~hidden ParserStatus parse(TCHAR & element)
    {
        return parser.Parse(element);
    }

    ~hidden void printLine()
    {
        if (currentLineStatus == Parser::Error)
        {
            console.WriteError(lineBuffer.str());
        }
        else if (currentLineStatus == Parser::Warning)
        {
            console.WriteWarning(lineBuffer.str());
        }
        else
        {
            console.WriteNormal(lineBuffer.str());
        }
        lineBuffer.str("");
        lineBuffer.clear();
        currentLineStatus = Parser::Ok;
    }*/

    /*public void ReadFromPipe()
    {
        #define BUFSIZE (1024 * 12)
        DWORD bytesRead;
        CHAR buffer[BUFSIZE];

        while(true)
        {
            const BOOL success = ReadFile(stdoutRead, buffer, BUFSIZE - 1,
                                          &bytesRead, NULL);
            if (!success || bytesRead == 0)
            {
                break;
            }
            parseOutput(buffer, bytesRead);
        }
        parseOutput("\n", 1);
    }*/

    public bool Read(DWORD & bytesRead, char * buffer, size_t bufferSize)
    {
        const BOOL success = ReadFile(stdoutRead, buffer, bufferSize - 1,
                                      &bytesRead, NULL);
        return (success && bytesRead > 0);
    }

    public void Run(TCHAR * fileName, TCHAR * args) {

        STARTUPINFO         startupInfo;
        memset(&startupInfo, 0, sizeof(startupInfo));
        startupInfo.cb = sizeof(startupInfo);
        startupInfo.hStdInput = ::GetStdHandle(STD_INPUT_HANDLE);
        startupInfo.hStdOutput = stdoutWrite;
        startupInfo.hStdError = stdoutWrite; // ::GetStdHandle(STD_OUTPUT_HANDLE);
        startupInfo.dwFlags |= STARTF_USESTDHANDLES;

        memset(&processInfo, 0, sizeof(processInfo));
        DWORD creationFlags = 0;
        creationFlags = CREATE_DEFAULT_ERROR_MODE;
        #ifdef UNICODE
            creationFlags |= CREATE_UNICODE_ENVIRONMENT;
        #endif

        BOOL result;

        result = CreateProcess(
            fileName,
            args,
            NULL,
            NULL,
            TRUE,
            NULL, //creationFlags, // NULL
            NULL, // (LPVOID) envBlock.get(), //NULL
            NULL, //wideWorkingDir.get(), // NULL
            &startupInfo, //&startupInfo, // &stiConsole
            &processInfo); // & priConsole

        if (result == FALSE)
        {
            DWORD bug = ::GetLastError();
            LPVOID lpMsgBuf;
            ::FormatMessage(
                FORMAT_MESSAGE_ALLOCATE_BUFFER |
                FORMAT_MESSAGE_FROM_SYSTEM |
                FORMAT_MESSAGE_IGNORE_INSERTS,
                NULL,
                bug,
                MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                (LPTSTR) &lpMsgBuf,
                0, nullptr );


            std::cout << (LPCTSTR)lpMsgBuf << std::endl;
            LocalFree(lpMsgBuf);
            abort("Error running process!");
        }
        else
        {
            //WaitForInputIdle(processInfo.hProcess, 2 * 60 * 1000);

        }

        struct ProcCloser
        {
            Process & p;

            ProcCloser(Process & p)
            :   p(p)
            {}

            static DWORD WINAPI  Close(LPVOID pc)
            {
                ProcCloser * me = static_cast<ProcCloser *>(pc);
                WaitForSingleObject(me->p.processInfo.hProcess, 2 * 60 * 1000);
                ::CloseHandle(me->p.processInfo.hProcess);
                ::CloseHandle(me->p.processInfo.hThread);
                ::CloseHandle(me->p.stdoutWrite);
                return 0;
            }
        };

        // Total memory leak. I HAVE NO REGRETS.
        ProcCloser * pCloser = new ProcCloser(*this);
        HANDLE thread = CreateThread(
            NULL,                   // default security attributes
            0,                      // use default stack size
            ProcCloser::Close,       // thread function name
            pCloser,          // argument to thread function
            0,                      // use default creation flags
            NULL);   // returns the thread identifier
    }


};
