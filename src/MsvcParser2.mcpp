~import Parser;
~import ParserStatus;
~import TCHAR;

//C:\Users\Tim\Work\Lp3\Projects\Bjolt\target\Process.cpp(43) : warning C4251: 'Process::lineBuffer' : class 'std::ba

class MsvcParser2
{
    ~block "h"
    {
        enum State {
            Start,
            Space,
            Select,
            Error,
            FatalError
        };

        private: State state;
    }

    private int textMatchIndex;

    public MsvcParser2()
    :   state(Start),
        textMatchIndex(0)
    {
    }

    public ParserStatus Parse(TCHAR & element)
    {
        const char * const fatalErrorText = "atal error LNK";
        const char * const errorText = "rror LNK";
        switch (state)
        {
            case Start:
                if (':' == element)
                {
                    state = Space;
                }
                break;
            case Space:
                if (' ' == element)
                {
                    state = Select;
                }
                else
                {
                    state = Start;
                }
                break;
            case Select:
                if ('e' == element)
                {
                    state = Error;
                    textMatchIndex = 0;
                }
                else if ('f' == element)
                {
                    state = FatalError;
                    textMatchIndex = 0;
                }
                else
                {
                    state = Start;
                }
				break;
            case Error:
                if (errorText[textMatchIndex] == element)
                {
                    ++ textMatchIndex;
                    if (textMatchIndex >= sizeof(errorText))
                    {
                        textMatchIndex = 0;
                        return ParserStatus::Error;
                    }
                }
                else
                {
                    textMatchIndex = 0;
                    state = Start;
                }
                break;
            case FatalError:
                if (fatalErrorText[textMatchIndex] == element)
                {
                    ++ textMatchIndex;
                    if (textMatchIndex >= sizeof(fatalErrorText))
                    {
                        textMatchIndex = 0;
                        return ParserStatus::Error;
                    }
                }
                else
                {
                    textMatchIndex = 0;
                    state = Start;
                }
                break;
            default:
                break;
        }
        return ParserStatus::Ok;
    }
};

